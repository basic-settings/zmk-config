#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRMR(k1, k2, k3, k4) &mt RSHIFT k1  &mt RCTRL k2  &mt RALT k3 &mt RGUI k4

// Reorder layers
#define DEFAULT 0
#define GAME 1
#define RIG 2
#define LEF 3
#define TRI 4

/ {

	 combos {
        	compatible = "zmk,combos";
		// In gamemode toggle a layer that has the leftside a normal alpha-numerical keyboard
        	combo_gamemode {
            		timeout-ms = <150>;
            		key-positions = <0 1 8 9>;
            		bindings = <&tog GAME>;
        	};
    };

	behaviors {
		ht: hold_tap_balanced {
			    compatible = "zmk,behavior-hold-tap";
			    #label = "HOLD_TAP_BAL";
			    #binding-cells = <2>;
			    flavor = "tap-preferred";
			    tapping-term-ms = <200>;
			    quick-tap-ms = <100>;
			    #require-prior-idle-ms = <50>;
			    bindings = <&kp>, <&kp>;
			};

	};

	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <RIG LEF>;
			then-layer = <TRI>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		default_layer {
			bindings = <

	&kp Q		&kp W		&kp E		&kp R		&kp T		&kp Y		&kp U		&kp I		&kp O		&kp P
	&ht LGUI A 	&ht LALT S 	&ht LCTRL D 	&ht LSHIFT F	&kp G		&kp H		&ht RSHIFT J	&ht RCTRL K	&ht RALT L	&ht RGUI SEMI
	&kp Z		&kp X		&kp C		&kp V		&kp B		&kp N		&kp M		&kp COMMA	&kp DOT		&kp FSLH
					&lt LEF ESC	&kp SPACE	&kp TAB		&kp ENTER	&kp BSPC	&lt RIG DEL
				>;
		};

		game_layer {
			bindings = <

	&kp Q		&kp W		&kp E		&kp R		&kp T		&kp Y		&kp U		&kp I		&kp O		&kp P
	&kp A 	&kp S 	&kp D 	&kp F	&kp G		&kp H		&ht RSHIFT J	&ht RCTRL K	&ht RALT L	&ht RGUI SEMI
	&kp Z		&kp X		&kp C		&kp V		&kp B		&kp N		&kp M		&kp COMMA	&kp DOT		&kp FSLH
					&lt LEF ESC	&kp SPACE	&kp TAB		&kp ENTER	&kp BSPC	&lt RIG DEL
				>;
		};

		right_layer {
			bindings = <
	&kp N1	&kp N2	&kp N3		&kp N4		&kp N5		&kp C_MUTE	&kp C_PREV	&kp UARW	&kp C_PP	&kp C_NEXT
	&kp N6	&kp N7	&kp N8		&kp N9		&kp N0		&kp C_STOP	&kp LARW	&kp DARW	&kp RARW	&kp PG_UP
	&none	&none	&none		&kp PSCRN	&kp INS		&kp HOME	&kp C_VOL_DN	&kp C_VOL_UP	&kp END		&kp PG_DN
			&lt LEF ESC	&kp SPACE	&kp TAB		&kp ENTER	&kp BSPC	&lt RIG DEL
				>;
		};

		left_layer {
			bindings = <
	&kp EXCL	&kp AT		&kp LBKT	&kp RBKT	&kp SQT		&kp EQUAL	&kp LT		&kp GT		&kp HASH	&kp COLON
	&kp BSLH	&kp FSLH	&kp LBRC	&kp RBRC	&kp DQT		&kp MINUS	&kp LPAR	&kp RPAR	&kp UNDER	&kp SEMI
	&kp PIPE	&kp PRCNT	&kp GRAVE	&kp TILDE	&kp ASTRK	&kp PLUS	&kp CARET	&kp DLLR	&kp AMPS	&kp QMARK
					&lt LEF ESC	&kp SPACE	&kp TAB		&kp ENTER	&kp BSPC	&lt RIG DEL
				>;
		};

		tri_layer {
			bindings = <
	&kp F1		&kp F2		&kp F3		&kp F4		&bt BT_SEL 0		&bt BT_SEL 3	&out OUT_TOG	&none	&kp C_MUTE	&kp C_NEXT
	&kp F5		&kp F6		&kp F7		&kp F8		&bt BT_SEL 1		&bt BT_SEL 4	&kp C_BRI_UP	&none	&kp C_VOL_UP	&kp C_PP
	&kp F9		&kp F10		&kp F11		&kp F12		&bt BT_SEL 2		&none		&kp C_BRI_DEC	&bt BT_CLR	&kp C_VOL_DN	&kp C_PREV
					&lt LEF ESC	&kp SPACE	&kp TAB			&kp ENTER	&kp BSPC	&lt RIG DEL
				>;
		};

	};
};
